

CREATE TABLE fulldata ( awb integer,breadth integer,buyer_city varchar,buyer_pin integer,cancelled_date timestamp with time zone,current_status varchar,delivered_date timestamp with time zone,delivery_attempt_count integer,dispatch_date timestamp with time zone,heavy boolean,height integer,last_mile_arrival_date timestamp with time zone,last_modified timestamp with time zone,length integer,order_created_date timestamp with time zone,order_id varchar PRIMARY KEY,price integer,product_category varchar,product_id varchar,product_name varchar,product_price integer,product_qty integer,promised_date timestamp with time zone,return_cause varchar,reverse_logistics_booked_date timestamp with time zone,reverse_logistics_date timestamp with time zone,reverse_logistics_delivered_date timestamp with time zone,rto_date timestamp with time zone,rto_delivered_date timestamp with time zone,seller_city varchar,seller_pin integer,shipper_confirmation_date timestamp with time zone,shipper_name varchar,shipping_cost integer,weight integer);
COPY fulldata FROM '/Users/ninjaPython/data.csv' DELIMITER ',' CSV HEADER;
CREATE TABLE result(order_id varchar, buyer_city varchar, seller_city varchar, product_category varchar, shipper_name varchar,order_created_date timestamp with time zone);
INSERT into result (order_id, buyer_city, seller_city, product_category, shipper_name,order_created_date)
SELECT order_id, buyer_city, seller_city, product_category, shipper_name,order_created_date
FROM fulldata;
SELECT * FROM result WHERE order_id='96a90543-ff1b-418c-bf2c-84fcdac75e2b';

SELECT COUNT(*),order_created_date
FROM result
WHERE shipper_name='SHPR2'
GROUP BY order_created_date; 

from sqlalchemy import (Table, Column, Integer, String, Boolean, TIMESTAMP)


fulldata = Table('fulldata', meta,
    Column('id', Integer, autoincrement=True), 
    Column('awb', Integer),
    Column('breadth', Integer),
    Column('buyer_city', String),
    Column('buyer_pin', Integer),
    Column('cancelled_date', TIMESTAMP),
    Column('current_status', String),
    Column('delivered_date', TIMESTAMP),
    Column('delivery_attempt_count', Integer),
    Column('dispatch_date', TIMESTAMP),
    Column('heavy', Boolean),
    Column('height', Integer),
    Column('last_mile_arrival_date', TIMESTAMP),
    Column('last_modified', TIMESTAMP),
    Column('length', Integer),
    Column('order_created_date', TIMESTAMP),
    Column('order_id', String, primary_key=True),
    Column('price', Integer),
    Column('product_category', String),
    Column('product_id', String),
    Column('product_name', String),
    Column('product_price', Integer),
    Column('product_qty', Integer),
    Column('promised_date', TIMESTAMP),
    Column('return_cause', String),
    Column('reverse_logistics_booked_date', TIMESTAMP),
    Column('reverse_logistics_date', TIMESTAMP),
    Column('reverse_logistics_delivered_date', TIMESTAMP),
    Column('rto_date', TIMESTAMP),
    Column('rto_delivered_date', TIMESTAMP),
    Column('seller_city', String),
    Column('seller_pin', Integer),
    Column('shipper_confirmation_date', TIMESTAMP),
    Column('shipper_name', String),
    Column('shipping_cost', Integer),
    Column('weight', Integer)
    )
result = Table('result', meta,
    Column('order_id', String, primary_key=True),
    Column('buyer_city', String),
    Column('seller_city', String),
    Column('product_category', String),
    Column('shipper_name', String),
    Column('order_created_date', TIMESTAMP)
)
meta.create_all(con)
    with open('/Users/ninjaPython/data.csv', 'r') as f:
        so = con.raw_connection()
        cursor = so.cursor()
        cmd = 'COPY fulldata FROM STDIN WITH (FORMAT CSV, HEADER TRUE)'
        cursor.copy_expert(cmd, f)
        so.commit()


In [40]: so = con.raw_connection()

In [41]: cursor = so.cursor()

In [42]: sample = "INSERT into result (order_id, buyer_city, seller_city, product_catego
    ...: ry, shipper_name,order_created_date)\nSELECT order_id, buyer_city, seller_city,
    ...:  product_category, shipper_name,order_created_date\nFROM fulldata"

In [43]: cursor.execute(sample)

In [44]: so.commit()

clause = result.select().where(result.c.order_id == '6db783b3-0fe3-4a61-8ff5-e1cff2f2f7fc')

In [66]: import datetime
    ...: import json
    ...:
    ...: def datetime_handler(x):
    ...:     if isinstance(x, datetime.datetime):
    ...:         return x.isoformat()
    ...:     raise TypeError("Unknown type")
    ...:

In [67]: json.dumps([dict(r) for r in con.execute(clause)], default=datetime_handler)
Out[67]: '[{"order_created_date": "2015-12-10T06:53:17", "product_category": "Tablets", "seller_city": "Ivonnestad", "buyer_city": "East Tamraville", "order_id": "6db783b3-0fe3-4a61-8ff5-e1cff2f2f7fc", "shipper_name": "SHPR4"}]'


session.query(result.c.order_created_date, func.count(result.c.order_creat
     ...: ed_date)).filter(result.c.shipper_name=='SHPR2').group_by(result.c.order_creat
     ...: ed_date).all()

     In [276]: q = session.query(full.c.shipper_name).filter(or_(full.c.seller_city == v for
     ...: v in ['Winifredbury','Azariahshire'])).all()


In [288]: q = session.query(full.c.shipper_name).filter(or_(full.c.seller_city == v for
     ...: v in ['Winifredbury','Azariahshire']),and_(full.c.order_id=='152ddd3f-4938-46b
     ...: c-bdb2-44f18a044615')).all()

kwargs = {'hometown': 'New York', 'university' : 'USC'}
User.query.filter_by(**kwargs)
# This above line is equivalent to saying...
User.query.filter_by(hometown='New York', university='USC')


In [320]: filter_group = [or_(full.c.seller_city == v for v in ['Winifredbury','Azariahshire']),or_(full.c.order_id == v for v in ['152ddd3f-4938-46bc-bdb2-44f18a044615'])]

In [321]: q = session.query(full.c.order_id).filter(and_(*filter_group))

In [322]: q.all()
Out[322]: [('152ddd3f-4938-46bc-bdb2-44f18a044615')]

In [323]: q = session.query(full.c.shipper_name).filter(and_(*filter_group))

In [324]: q.all()
Out[324]: [('SHPR7')]

